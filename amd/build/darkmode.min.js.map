{"version":3,"file":"darkmode.min.js","sources":["../src/darkmode.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Manage the dark mode.\n *\n * @module     theme_bambuco/darkmode\n * @copyright  2025 David Herney @ BambuCo\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Log from 'core/log';\nimport Ajax from 'core/ajax';\n\n/**\n * Change the theme mode (dark or light).\n *\n * @method setThemeMode\n * @param {array} stylesheets\n */\nexport const setThemeMode = (stylesheets) => {\n    // Get the theme toggle switch.\n    const toggleTheme = document.getElementById('theme-darkmode');\n\n    // Current page dont have the toggle switch.\n    if (!toggleTheme) {\n        return;\n    }\n\n    // Add event listener to the toggle switch.\n    toggleTheme.addEventListener('change', function() {\n        const isChecked = this.checked;\n\n        if (isChecked) {\n            document.body.classList.remove('lightmode');\n            document.body.classList.add('darkmode');\n            addOrRemoveStylesheet(stylesheets, 'dark');\n            saveThemeMode('dark');\n\n        } else {\n            document.body.classList.remove('darkmode');\n            document.body.classList.add('lightmode');\n            addOrRemoveStylesheet(stylesheets, 'light');\n            saveThemeMode('light');\n        }\n    });\n\n};\n\n/**\n * Add or remove the stylesheet depending on the mode.\n *\n * @param {array} stylesheets\n * @param {string} mode\n */\nconst addOrRemoveStylesheet = (stylesheets, mode) => {\n    stylesheets.forEach(stylesheet => {\n\n        if (!stylesheet.url) {\n            return;\n        }\n\n        if (stylesheet.mode === mode) {\n            var link = document.createElement('link');\n            link.rel = 'stylesheet';\n            link.href = stylesheet.url;\n            link.type = 'text/css';\n            document.head.appendChild(link);\n        } else {\n            var link = document.querySelector(`link[href=\"${stylesheet.url}\"]`);\n            if (link) {\n                link.remove();\n            }\n        }\n    });\n};\n\nconst saveThemeMode = (mode) => {\n    Ajax.call([{\n        methodname: 'theme_bambuco_set_mode',\n        args: {'mode': mode},\n        fail: function(e) {\n            Log.debug(e);\n        }\n    }]);\n};\n"],"names":["stylesheets","toggleTheme","document","getElementById","addEventListener","this","checked","body","classList","remove","add","addOrRemoveStylesheet","saveThemeMode","mode","forEach","stylesheet","link","url","createElement","rel","href","type","head","appendChild","querySelector","call","methodname","args","fail","e","debug"],"mappings":";;;;;;;sLAgC6BA,oBAEnBC,YAAcC,SAASC,eAAe,kBAGvCF,aAKLA,YAAYG,iBAAiB,UAAU,WACjBC,KAAKC,SAGnBJ,SAASK,KAAKC,UAAUC,OAAO,aAC/BP,SAASK,KAAKC,UAAUE,IAAI,YAC5BC,sBAAsBX,YAAa,QACnCY,cAAc,UAGdV,SAASK,KAAKC,UAAUC,OAAO,YAC/BP,SAASK,KAAKC,UAAUE,IAAI,aAC5BC,sBAAsBX,YAAa,SACnCY,cAAc,oBAYpBD,sBAAwB,CAACX,YAAaa,QACxCb,YAAYc,SAAQC,iBAaRC,KAXHD,WAAWE,MAIZF,WAAWF,OAASA,OAChBG,KAAOd,SAASgB,cAAc,SAC7BC,IAAM,aACXH,KAAKI,KAAOL,WAAWE,IACvBD,KAAKK,KAAO,WACZnB,SAASoB,KAAKC,YAAYP,QAEtBA,KAAOd,SAASsB,mCAA4BT,WAAWE,aAEvDD,KAAKP,cAMfG,cAAiBC,qBACdY,KAAK,CAAC,CACPC,WAAY,yBACZC,KAAM,MAASd,MACfe,KAAM,SAASC,gBACPC,MAAMD"}